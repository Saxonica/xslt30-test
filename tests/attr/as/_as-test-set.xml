<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns="http://www.w3.org/2012/10/xslt-test-catalog"
          name="as">
   <description>Tests as</description>
   <environment name="as-01">
      <source role=".">
         <content><![CDATA[<doc></doc>]]></content>
      </source>
      <source file="builtinas20_355.xml" uri="builtinas20_355.xml"/>
      <schema role="stylesheet-import"
              file="variousTypesSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-02">
      <source role=".">
         <content><![CDATA[<doc>
	<item1>
		<item2></item2>
	</item1>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-03">
      <source role=".">
         <content><![CDATA[<doc>
	<item attr="red">hello</item>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-04">
      <source role=".">
         <content><![CDATA[<doc>
	<item attr1="red" attr2="blue" attr3="green">hello</item>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-05">
      <source role="." file="as-05.xml"/>
   </environment>
   <environment name="as-06">
      <source role="." file="as-06.xml"/>
   </environment>
   <environment name="as-07">
      <source role=".">
         <content><![CDATA[<doc>
<item-list>
<item1>5.4321E-1001</item1>
<item2>http://www.mytypetest.org</item2>
</item-list>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-08">
      <source role="." file="as-08.xml"/>
   </environment>
   <environment name="as-09">
      <source role="." file="as-09.xml"/>
   </environment>
   <environment name="as-10">
      <source role=".">
         <content><![CDATA[<doc>
<item-list>
<item>5.4321E-1001</item>
</item-list>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-11">
      <source role=".">
         <content><![CDATA[<doc>
<item-list>
<item1>5.4321E-1</item1>
<item1>-0.00175</item1>
<item1>INF</item1>
<item>hello</item>
</item-list>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-12">
      <source role=".">
         <content><![CDATA[<doc> 
<?Process fun?>
<item attrib="red" xmlns:a="http://www.a.org"><!--I am a comment-->hello</item>
<item1 xmlns="http://test.default.org">namespaced</item1>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-13">
      <source role=".">
         <content><![CDATA[<doc> 
<?Process fun?>
<item attrib="red" xmlns:a="http://www.a.org"><!--I am a comment-->hello</item>
<item>namespaced</item>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-14">
      <source role=".">
         <content><![CDATA[<doc attrib="green"> 
<?Process fun?>
<item attrib="red" xmlns:a="http://www.a.org"><!--I am a comment-->hello</item>
<item1 attrib="blue">namespaced</item1>
</doc>]]></content>
      </source>
   </environment>
   <environment name="as-15">
      <source role="." file="as-15.xml"/>
   </environment>
   <environment name="as-16">
      <source role=".">
         <content><![CDATA[<doc/>]]></content>
      </source>
   </environment>
   <environment name="as-17">
      <source role="." file="as-17.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="builtinTypeSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-18">
      <source role="." file="as-18.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="variousTypesSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-19">
      <source role="." file="as-19.xml"/>
   </environment>
   <environment name="as-20">
      <source role="." file="as-20.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="stylesheet-import"
              file="variousTypesSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-21">
      <source role="." file="as-21.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference" file="anyUriSchemaAs.xsd" xsd-version="1.0"/>
   </environment>
   <environment name="as-22">
      <source role="." file="as-22.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="integerSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-23">
      <source role="." file="as-23.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="integerSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-24">
      <source role="." file="as-24.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="variousTypesSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-25">
      <source role="." file="as-25.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="builtinTypeSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-26">
      <source role="." file="as-26.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="builtinTypeSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-27">
      <source role="." file="as-27.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="builtinTypeSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-28">
      <source role="." validation="strict">
         <content><![CDATA[<elem-Name xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="builtinTypeSchemaAs.xsd">
a:_underscore_
</elem-Name>]]></content>
      </source>
      <schema role="source-reference"
              file="builtinTypeSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-29">
      <source role="." file="as-29.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="builtinTypeSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-30">
      <source role="." file="as-30.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="list-unionSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-31">
      <source role="." file="as-31.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="list-unionSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-32">
      <source role="." file="as-32.xml" validation="strict"/>
      <source file="as-32b.xml" uri="as-32b.xml"/>
      <schema file="subgroupTypeSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-33">
      <source role="." file="as-33.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="id-idref-notation-schemaas.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-34">
      <source role="." file="as-34.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="id-idref-notation-schemaas.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-35">
      <source role="." file="as-35.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="variousTypesSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>
   <environment name="as-36">
      <source role="." file="as-36.xml" validation="strict">
	<modified by="Tim Mills" on="2012-11-23" change="Added validation attribute. Bug 20026" />
      </source>
      <schema role="source-reference"
              file="attributesSchemaAs.xsd"
              xsd-version="1.0"/>
   </environment>

   <test-case name="as-0101">
      <description>Test with global xsl:variable and @as=empty-sequence(). Value for @select are () and empty sequence obtained at run time.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0101.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetruefalsefalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0102">
      <description>Test with xsl:template and @as=empty-sequence(), the sequence constructor contains a sequence of a explicitly constructed built-in atomic types with empty sequence as an argument.Types constructed are: xs:string, xs:boolean, xs:double, xs:dayTimeDuration, xs:date</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0102.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0103">
      <description>Test with xsl:function and @as=empty-sequence(). Use xsl:sequence with @select=() inside the sequence constructor.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0103.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0104">
      <description>Test with local xsl:param and @as=empty-sequence(). The values for @select are () and empty sequence obtained at run time.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0104.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetruefalsefalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0105">
      <description>Test of global xsl:variable with text inside the sequence constructor and @as="xs:untypedAtomic". Verify that the resulting variable type is xs:untypedAtomic.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0105.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0106">
      <description>Show that any explicitly constructed built-in atomic type can go in @select when @as="xs:anyAtomicType". Effective global variable type is both xs:anyAtomicType and the actual type used in @select.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0106.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0106.out"/>
      </result>
   </test-case>

   <test-case name="as-0107">
      <description>Test of two xsl:templates, one returns a sequence of several explicitly constructed different built-in types and the other returns an empty sequence, both have @as="xs:anyAtomicType*".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0107.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>P1Y2M3DT10H30M23S 2000-01-16T00:00:00Z 2005 0</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0108">
      <description>Test with xsl:template which returns a sequence of several explicitly constructed different built-in types and @as="xs:anyAtomicType+".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0108.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>P1Y2M3DT10H30M23S 2000-01-16T00:00:00Z 2005 0</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0109">
      <description>Test of two xsl:templates with @as="xs:anyAtomicType?", one returns a singleton sequence, the other an empty sequence.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0109.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>P1Y2M3DT10H30M23S</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0110">
      <description>Test with global xsl:variable where value in @select is explicitly constructed and of the same type as the built-in atomic type in @as. Types tested are: all built-in primitive types, xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0110.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0110.out"/>
      </result>
   </test-case>

   <test-case name="as-0111">
      <description>Test with global xsl:variable without @select, where sequence constructor contains a typed value of the same type as specified in @as. Values for @as tested: all built-in primitive types, xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0111.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0111.out"/>
      </result>
   </test-case>

   <test-case name="as-0112">
      <description>Test with xsl:template which returns an explicitly constructed built-in atomic type value and @as speficies the same type. Verify no typing error is raised. Value types tested: - all built-in primitive types, xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0112.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0112.out"/>
      </result>
   </test-case>

   <test-case name="as-0113">
      <description>Test with xsl:function where where the value in the sequence constructor is explicitly constructed and of the same type as the built-in atomic type in @as. Types tested are: - xs:string, xs:double, xs:integer, xs:dayTimeDuration, xs:QName</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0113.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0113.out"/>
      </result>
   </test-case>

   <test-case name="as-0114">
      <description>Test type of global xsl:variable where @select contains an xs:float, xs:decimal or xs:integer, @as="xs:double".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0114.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0115">
      <description>Test type of global xsl:variable where @select contains an xs:decimal or xs:integer, @as="xs:float".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0115.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var2>falsetrue</var2>
<var3>falsetrue</var3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0116">
      <description>Test type of global xsl:variable where @select contains an xs:anyURI, @as="xs:string".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0116.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>falsetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0117">
      <description>Test type of global xsl:variable where @select contains an xs:integer, @as="xs:decimal".(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0117.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0118">
      <description>Test type of global xsl:variable where @select contains an xs:dayTimeDuration or xs:yearMonthDuration, @as="xs:duration".(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0118.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var2>truetrue</var2>
<var3>truetrue</var3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0119">
      <description>Test with an empty sequence obtained at run time in @select of global xsl:variable and @as is a built-in atomic type with occurence indicator (?). Verify the variable is of the type specified in @as.Values for @as tested: all built-in primitive types (except xs:QName), xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0119.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0119.out"/>
      </result>
   </test-case>

   <test-case name="as-0120">
      <description>Test with xsl:variable where the value in @select is (), the built-in primitive type in @as has occurence indicator (?). Values for @as tested: all built-in primitive types (except xs:QName), xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0120.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0120.out"/>
      </result>
   </test-case>

   <test-case name="as-0121">
      <description>Test with xsl:template which constructs the empty sequence () and @as is a built-in type use occurence indicator (?). Values for @as tested: all built-in primitive types (except xs:QName), xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0121.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0121.out"/>
      </result>
   </test-case>

   <test-case name="as-0122">
      <description>Test with xsl:function that constructs an xs:dayTimeDuration value as a child of LRE and has @as=xs:dayTimeDuration?. Verify the returned value if of type xs:dayTimeDuration?.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0122.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0123">
      <description>Test with an xs:anyURI value as a child of LRE in the sequence constructor of a global xsl:param and @as=xs:anyURI+. Verify the parameter is of type xs:anyURI+.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0123.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0124">
      <description>Test with a local xsl:param, where @select is an empty sequence obtained at run time and @as=xs:double*. Verify the parameter is of type xs:double*.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0124.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truefalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0125">
      <description>Test type of global xsl:variable without @select and @as="document-node()". Sequence constructor contains an xsl:document instruction.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0125.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0126">
      <description>Test type of global xsl:variable without @select and @as="element()". Sequence constructor contains an xsl:element instruction or an LRE.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0126.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0127">
      <description>Test type of result of xsl:function that has @as="element(QName, xs:untyped)" and sequence constructor contains xsl:element or an LRE.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0127.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0128">
      <description>Test type of result of xsl:function that has @as="attribute() and sequence constructor contains xsl:attribute.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0128.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0129">
      <description>Test with global xsl:variable that has @as=""document-node()?", no @select and sequence constructor is empty or has one xsl:document.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0129.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truefalse</e1>
<e2>truetrue</e2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0130">
      <description>Test with xsl:template that has @as="element(QName)*" and returns the empty sequence, a sequence of xsl:element or LREs.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0130.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0130.out"/>
      </result>
   </test-case>

   <test-case name="as-0131">
      <description>Test with xsl:template that has @as="element(*)+" and returns a sequence of xsl:element or LREs.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0131.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0131.out"/>
      </result>
   </test-case>

   <test-case name="as-0132">
      <description>Test with xsl:template that has @as="element(*, xs:untyped)+" and returns a sequence of xsl:element or LREs.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0132.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0132.out"/>
      </result>
   </test-case>

   <test-case name="as-0133">
      <description>Test with xsl:template that has @as="attribute(QName, xs:untypedAtomic)*" and returns the empty sequence or a sequence of xsl:attribute.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0133.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1/>
<e2 att="4"/>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0134">
      <description>Test with xsl:template that has @as="attribute()?" and returns the empty sequence or an xsl:attribute.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0134.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1/>
<e2 att="1"/>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0135">
      <description>Test with xsl:template that has @as="attribute(*, xs:untypedAtomic)?" and returns the empty sequence or an xsl:attribute.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0135.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1/>
<e2 att="1"/>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0136">
      <description>Test with xsl:function that has @as="document-node()*" and returns the empty sequence or a document node from fn:document().</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0136.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<func1>truefalse</func1>
<func2>truetrue</func2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0137">
      <description>Test with xsl:function that has @as="element()*" and returns: -an empty sequence, one xsl:element node, a sequence of xsl:element nodes</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0137.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<func1>truefalse</func1>
<func2>truetrue</func2>
<func3>truefalse</func3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0138">
      <description>Test with xsl:function that has @as="attribute()?", and returns nothing or an xsl:attribute.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0138.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<func1>truefalse</func1>
<func2>truetrue</func2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0139">
      <description>Test type of global xsl:variable that has @as="item()?" and no @select, the sequence constructor contains one of: - nothing, LRE, xsl:value-of, xsl:element, xsl:attribute</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0139.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
<e3>true</e3>
<e4>true</e4>
<e5>true</e5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0140">
      <description>Test with xsl:template that has @as="item()" and the sequence constructor contains one of: - LRE, xsl:value-of, xsl:sequence with one item, xsl:element, xsl:document</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0140.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1><i1>item</i1></e1>
<e2>my string</e2>
<e3>2</e3>
<e4><elem>hi1</elem></e4>
<e5><my:item xmlns:my="http://uri.test">1</my:item></e5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0141">
      <description>Test with xsl:function that has @as="item()*" and the sequence constructor contains one of: -nothing, LREs, xsl:value-of, xsl:sequence, sequence of xsl:element, xsl:document</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0141.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0141.out"/>
      </result>
   </test-case>

   <test-case name="as-0142">
      <description>Test with xsl:template which contains an explicitly constructed typed value and @as="xs:anyAtomicType". Types tested: - derived built-in atomic type, user-defined atomic type</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0142.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<temp1>P1Y2M3DT10H30M23S</temp1>
<temp2>2005</temp2>
<temp3>1.0001</temp3>
<temp4>000-TM</temp4>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0143">
      <description>Test with global xsl:variable without @select, where sequence constructor contains an explicitly constructed typed value of the same type as the built-in derived atomic type in @as. Verify the variable is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0143.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0143.out"/>
      </result>
   </test-case>

   <test-case name="as-0144">
      <description>Test of global xsl:variable with a sequence constructor of LREs and @as= built-in derived atomic type. Value of LRE is in the lexical space of the type in @as. Verify the variable is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0144.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0144.out"/>
      </result>
   </test-case>

   <test-case name="as-0145">
      <description>Test of xsl:template with a sequence constructor of LREs and @as= built-in derived atomic type. Value of LRE is in the lexical space of the type in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0145.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0145.out"/>
      </result>
   </test-case>

   <test-case name="as-0146">
      <description>Test with xsl:function where the value in the sequence constructor is explicitly constructed and is of the same type as the built-in derived atomic type in @as. Types tested are: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID. Verify the result of the function is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0146.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<func1>true</func1>
<func2>true</func2>
<func3>true</func3>
<func4>true</func4>
<func5>true</func5>
<func6>true</func6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0147">
      <description>Test with global xsl:variable where value in @select is explicitly constructed and of the same type as the user-defined atomic type (derived by restriction) in @as. Verify the variable is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0147.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0148">
      <description>Test of global xsl:variable with a sequence constructor of LREs and @as= user-defined atomic type (derived by restriction). Value of LRE is in the lexical space of the type in @as. Verify the variable is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0148.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>123-AB * falsetrue</var1>
<var2>0 * falsetrue</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0149">
      <description>Test with xsl:function where the value in the sequence constructor is explicitly constructed and is of the same type as the user-defined atomic type (derived by restriction) in @as. Verify the result of the function is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0149.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<func1>true</func1>
<func2>true</func2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0150">
      <description>Test with xsl:function that returns an empty sequence and has @as=xs:NMTOKEN*. Verify the returned value if of type xs:NMTOKEN*.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0150.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<func1>truefalse</func1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0151">
      <description>Test with xsl:template that has @as="document-node(element(QName, user-defined-list-type) +". The sequence constructor contains several xsl:document with a valid document elements.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-01"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-0151.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><item>111-AB</item><item>999-AC</item></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0201">
      <description>Test with tunnel xsl:with-param and @as=empty-sequence(). The values for @select are () and empty sequence obtained at run time.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-02"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0201.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0301">
      <description>Test with global xsl:variable where the value of @select is an attribute obtained at run time, @as="xs:untypedAtomic". Verify that the resulting variable type is xs:untypedAtomic</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-03"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0301.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>true</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0302">
      <description>Test with global xsl:variable where the value of @select is an attribute obtained at run time or (), @as="xs:untypedAtomic?".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-03"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0302.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetruetruefalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0303">
      <description>Test with xsl:template with xsl:value-of on a literal string inside the sequence constructor and has @as=xs:untypedAtomic.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-03"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0303.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
	123
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0304">
      <description>Test with global xsl:variable where of @select has a value obtained at run time, @as="xs:anyAtomicType". Verify that the resulting variable type is xs:anyAtomicType.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-03"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0304.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetruetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0401">
      <description>Test with global xsl:variable where the value of @select is a sequence of attributes obtained at run time or (), @as="xs:untypedAtomic*".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-04"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0401.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truefalsetruefalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0402">
      <description>Test with global xsl:variable where the value of @select is a sequence of attributes obtained at run time, @as="xs:untypedAtomic+".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-04"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0402.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truefalse</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0501">
      <description>Test with global xsl:variable where @select has an xs:untypedAtomic value and @as is a built-in atomic type. Verify the variable is of the type specified in @as. Values for @as tested: all built-in primitive types, xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-05"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0501.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0501.out"/>
      </result>
   </test-case>

   <test-case name="as-0601">
      <description>Test with non-tunnel xsl:with-param where the value in @select is explicitly constructed and of the same type as the built-in atomic type in @as. Verify the parapmeter is of the type specified in @as.Types tested are: xs:string, xs:double, xs:integer, xs:dayTimeDuration, xs:QName</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-06"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0601.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0601.out"/>
      </result>
   </test-case>

   <test-case name="as-0701">
      <description>Test with tunnel xsl:param where value in @select is xs:untypedAtomic obtained at run time and @as=xs:double.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-07"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0701.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><par1>0truetrue</par1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0702">
      <description>Test with tunnel xsl:with-param without @select, where the sequence constructor contains an xs:untypedAtomic obtained at run time and @as=xs:double.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-07"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0702.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>

<par1>0true</par1>


</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0703">
      <description>Test type of tunnel xsl:with-param that has @as="element(QName, xs:untyped?)" with: - @select selecting an element node from input file - no @select and sequence constructor has xsl:element - no @select and sequence constructor has an LRE</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-07"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0703.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>

<par1>http://www.mytypetest.orgtrue</par1>
<par2>hellotrue</par2>
<par3>my elementtrue</par3>


</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-0801">
      <description>Test with a sequence of xs:untypedAtomic values in @select of a global xsl:variable and @as is a built-in atomic type with occurence indicator (*). Verify variable is of type specified in @as. Values for @as tested: all built-in primitive types (except xs:QName), xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-08"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0801.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0801.out"/>
      </result>
   </test-case>

   <test-case name="as-0802">
      <description>Test with xsl:template which contains a sequence of xs:untypedAtomic values and @as is a built-in type with occurrence indicator (+). Values for @as tested: -all built-in primitive types (except xs:QName), xs:integer, xs:dayTimeDuration, xs:yearMonthDuration</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-08"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0802.xsl"/>
      </test>
      <result>
         <assert-xml file="as-0802.out"/>
      </result>
   </test-case>

   <test-case name="as-0901">
      <description>Test with an xs:untypedAtomic value as a child of LRE in the sequence constructor of a local xsl:variable and @as=xs:dayTimeDuration*. Verify the variable is of type xs:dayTimeDuration*.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-09"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-0901.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1001">
      <description>Test with an xs:anyURI value as a child of LRE in the sequence constructor of a non-tunnel xsl:with-param and @as=xs:anyURI+. Verify the parameter is of type xs:anyURI+.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-10"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1001.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>

<par1>http://test.orgtruetrue</par1>

</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1101">
      <description>Test with several xs:untypedAtomic values as children of LRE in the sequence constructor of a tunnel xsl:with-param and @as=xs:float*. Verify the parameter is of type xs:float*.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-11"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1101.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>

<empty/>
<empty/>
<empty/>
<par1>0.54321 -0.00175 INFtruefalse</par1>

</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1201">
      <description>Test type of global xsl:variable selecting any node from input file or temporary tree, @as="node()".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="namespace_axis"/>
      </dependencies>
      <test>
         <stylesheet file="as-1201.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1201.out"/>
      </result>
   </test-case>

   <test-case name="as-1202">
      <description>Test type of global xsl:variable with @select selecting an element node from input file or temporary tree, @as="element(QName)".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1202.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
<e3>true</e3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1203">
      <description>Test type of global xsl:variable with @select selecting an element node from input file or temporary tree, @as="element(QName, xs:untyped?)".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1203.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
<e3>true</e3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1204">
      <description>Test type of global xsl:variable selecting an attribute node from input file or from a temporary tree, @as="attribute()".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1204.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1205">
      <description>Test type of global xsl:variable selecting an attribute node from input file or from a temporary tree, @as="attribute(*)".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1205.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1206">
      <description>Test type of global xsl:variable selecting an attribute node from input file or from a temporary tree, @as="attribute(QName, xs:untypedAtomic)".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1206.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1207">
      <description>Test type of global xsl:variable selecting a comment node from input file or from a temporary tree, @as="comment()".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1207.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1208">
      <description>Test type of global xsl:variable selecting a text node from input file or from a temporary tree, @as="text()".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1208.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1209">
      <description>Test type of global xsl:variable selecting a processing instruction from input file or from a temporary tree, @as="processing-instruction()".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1209.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1210">
      <description>Test of several templates which contain document, element,attribute, comment, text or processing-instruction nodes and have @as="node()".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1210.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1210.out"/>
      </result>
   </test-case>

   <test-case name="as-1211">
      <description>Test of xsl:template which contains an attribute node from input file or xsl:attribute and has @as="attribute(QName, xs:untypedAtomic)".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1211.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1 attrib="red"/>
<e2 e1="attribute"/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1212">
      <description>Test type of local xsl:param that has @as="element()" with: - @select selecting an element node from input file - no @select and sequence constructor has xsl:element - no @select and sequence constructor has an LRE</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1212.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetruetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1213">
      <description>Test type of local xsl:param that has @as="attribute()" with: - @select selecting an attribute node from input file - no @select and sequence constructor has xsl:attribute</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1213.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1214">
      <description>Test with global xsl:variable that has @as="node()+", no @select and sequence constructor contains: -one node, a sequence of nodes of mixed kinds, nodes from a temporary tree</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1214.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1215">
      <description>Test with global xsl:variable that has @as=""element()*" and @select contains: - one element node, a sequence of element nodes from input file, an empty sequence obtained at run time, (), element nodes from a temporary tree.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1215.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3>
<e4>truefalse</e4>
<e5>truefalse</e5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1216">
      <description>Test with local xsl:param that has @as="element()+" and @select contains: -one element node, a sequence of element nodes from input file, element nodes from a temporary tree</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1216.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1217">
      <description>Test with tunnel xsl:with-param that has @as=""element()*" and @select contains: -one element node, a sequence of element nodes from input file, an empty sequence obtained at run time, (), element nodes from a temporary tree</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1217.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>hellotrue</par1>
<par2>hello namespacedtrue</par2>
<par3>true</par3>
<par4>true</par4>
<par5>hello hellotrue</par5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1218">
      <description>Test type of global xsl:variable, @as="item()" and @select contains one of: -xs:untypedAtomic from input file, explicitly created built-in primitive type (xs:double), attribute() from input file, document-node() from input file, element from temporary tree, literal string</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1218.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
<e3>true</e3>
<e4>true</e4>
<e5>true</e5>
<e6>true</e6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1219">
      <description>Test type of global xsl:variable that has @as="item()*" and no @select, the sequence constructor contains one of: -nothing, LREs, xsl:value-of, xsl:sequence, sequence of xsl:element, xsl:document</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1219.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
<e3>true</e3>
<e4>true</e4>
<e5>true</e5>
<e6>true</e6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1220">
      <description>Test type of global xsl:variable, @as="item()+" and @select contains one of: - sequence of xs:untypedAtomic from input file, explicitly created built-in primitive type (xs:double), mixed sequence of explicitly created built-in primitive types, attribute() from input file, document-node() from input file, temporary tree, literal string</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1220.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
<e3>true</e3>
<e4>true</e4>
<e5>true</e5>
<e6>true</e6>
<e7>true</e7></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1221">
      <description>Test type of local xsl:param that has @as="element()" with: - @select selecting an element node from input file - no @select and sequence constructor has xsl:element - no @select and sequence constructor has an LRE</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1221.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>true</e1>
<e2>true</e2>
<e3>true</e3>
<e4>true</e4>
<e5>true</e5>
<e6>true</e6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1222">
      <description>Test type of non-tunnel xsl:with-param, @as="item()*" and @select contains one of: -sequence of xs:untypedAtomic from input file, explicitly created built-in primitive type (xs:double), mixed sequence of explicitly created built-in primitive types, attribute() from input file, document-node() from input file, temporary tree, (), empty sequence obtained at run time, literal string</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-12"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1222.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1222.out"/>
      </result>
   </test-case>

   <test-case name="as-1301">
      <description>Test with global xsl:variable that has @as="element(QName, xs:untyped)*" and its sequence constructor contains: - one element node, a sequence of element nodes from input file, an empty sequence obtained at run time, (), element nodes from a temporary tree.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-13"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1301.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3>
<e4>truefalse</e4>
<e5>truefalse</e5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1302">
      <description>Test with global xsl:variable that has @as="element(*, xs:untyped?)+" and @select contains a sequence of element nodes from input file.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-13"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1302.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truefalse</e1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1401">
      <description>Test with global xsl:variable that has @as="attribute()*" and @select contains: -one attribute node, a sequence of attribute nodes from input file, an empty sequence obtained at run time, (), attribute nodes from a temporary tree</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-14"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1401.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3>
<e4>truefalse</e4>
<e5>truefalse</e5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1402">
      <description>
      	Test with global xsl:variable that has @as="attribute(QName, xs:untypedAtomic)+" and its sequence constructor contains: 
      	-one attribute node, a sequence of attribute nodes from input file, attribute nodes from a temporary tree
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-14"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1402.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1403">
      <description>
      	Test with global xsl:variable that has @as="attribute()?" and @select contains: -one attribute node, 
      	an empty sequence obtained at run time, (), an attribute node from a temporary tree
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-14"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1403.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3>
<e4>truetrue</e4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1404">
      <description>Test with global xsl:variable that has @as="comment()?" and @select contains: -one comment node from input file, an empty sequence obtained at run time, (), a comment node from a temporary tree</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-14"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1404.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3>
<e4>truefalse</e4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1405">
      <description>Test with global xsl:variable that has @as="text()+" and @select contains: -one text node from input file, a sequence of text nodes from input file, text nodes from a temporary tree</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-14"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1405.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1501">
      <description>Test with global xsl:variable that has @as="processing-instruction()*" and @select contains: -one processing-instruction node from input file, a sequence of processing-instruction nodes from input file, an empty sequence obtained at run time, (), processing-instruction nodes from a temporary tree</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-15"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1501.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<e1>truetrue</e1>
<e2>truefalse</e2>
<e3>truefalse</e3>
<e4>truefalse</e4>
<e5>truefalse</e5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1601">
      <description>
      	Test that an error is raised if @as is used in context where it is not permitted 
      	(@as used on xsl:call-template instruction).</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-16"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1601.xsl"/>
      </test>
      <result>
         <error code="XTSE0090"/>
      </result>
   </test-case>

   <test-case name="as-1602">
      <description>
      	Test that an error is raised if in xsl:template @as=xs:double but the value in the sequence 
      	constructor cannot be converted to xs:double.
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-16"/>
      <dependencies>
         <spec value="XSLT20+"/>
      </dependencies>
      <test>
         <stylesheet file="as-1602.xsl"/>
      </test>
      <result>
         <error code="XTTE0505"/>
      </result>
   </test-case>

   <test-case name="as-1701">
      <description>
      	Test with global xsl:variable where @select is a typed value obtained at run time and @as="xs:anyAtomicType".
      	 Effective global variable type is both xs:anyAtomicType and the actual type used in @select. 
      	 No Schema is imported. Types tested: -all primitive built-in types, xs:integer, all derived builtin types
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1701.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1701.out"/>
      </result>
   </test-case>

   <test-case name="as-1702">
      <description>
      	Test with global xsl:variable where @select a typed value the same in @as obtained at run time, @as is a 
      	built-in derived atomic type. Verify the variable is of the type specified in @as.
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1702.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1702.out"/>
      </result>
   </test-case>

   <test-case name="as-1703">
      <description>Test of xsl:template with a sequence constructor of LREs and @as= built-in derived atomic type. Value of LRE is in the lexical space of the type in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1703.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1703.out"/>
      </result>
   </test-case>

   <test-case name="as-1704">
      <description>Test with local xsl:variable where @select has a typed value same as in @as, obtained at run time from element or attribute nodes, @as is abuilt-in derived atomic type. Verify the variable is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas028.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3>
<var4>falsetrue</var4>
<var5>falsetrue</var5>
<var6>falsetrue</var6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1705">
      <description>Test with global xsl:param where @select is a typed value the same as in @as and obtained at run time, @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas038.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1706">
      <description>Test with global xsl:param without @select, where the sequence constructor contains a typed value, the same as in @as, obtained at run time and @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as.Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas041.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1707">
      <description>Test with local xsl:param where @select is a typed value the same as in @as and obtained at run time, @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas044.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1708">
      <description>Test with non-tunnel xsl:with-param where the value in @select is a typed value, the same as in @as, obtained at run time from element or attribute nodes, @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas050.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1709">
      <description>Test type of global xsl:variable where @select contains built-in types derived by restriction from xs:decimal, @as="xs:double".(type promotion) Types tested: - xs:long, xs:nonNegativeInteger, xs:int, xs:byte</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1709.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3>
<var4>falsetrue</var4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1710">
      <description>Test type of global xsl:variable where @select contains built-in types derived by restriction from xs:decimal, @as="xs:float".(type promotion) Types tested: - xs:long, xs:nonNegativeInteger, xs:int, xs:byte</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1710.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3>
<var4>falsetrue</var4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1711">
      <description>Test type of global xsl:variable where @select contains an xs:NMTOKEN, @as="xs:token".(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1711.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1712">
      <description>Test type of global xsl:variable where @select contains an xs:ID, @as="xs:normalizedString".(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1712.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1713">
      <description>Test with xsl:template that contains an xs:NMTOKEN, @as="xs:token".(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-17"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1713.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<temp1>business-enforcement::link-chain.common</temp1>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1801">
      <description>Test with global xsl:variable which holds a mixed sequence of derived built-in or user-defined atomic values or () and @as="xs:anyAtomicType*".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1801.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truefalse</var1>
<var2>truefalse</var2>
<var3>truefalse</var3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1802">
      <description>Test with global xsl:variable and @as="xs:anyAtomicType?", @select is: -empty-sequence, built-in derived atomic type, user-defined atomic type derived by restriction</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1802.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truefalse</var1>
<var2>truetrue</var2>
<var3>truetrue</var3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1803">
      <description>Test with xsl:template which returns a mixed sequence of derived built-in or user-defined atomic values and @as="xs:anyAtomicType+".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1803.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<temp1>http://www.uri.com  *  -P1Y23DT59.123S  *  0  *  -7632460  *  hello</temp1>
<temp2>000-TM  *  1.0001  *  123-AB  *  1000</temp2>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1804">
      <description>Test with global xsl:variable where @select has a typed value obtained at run time from attribute nodes and of the same type as the user-defined atomic type (derived by restriction) in @as. Verify the variable is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1804.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1805">
      <description>Test with local xsl:param without @select, where sequence constructor contains a typed value obtained at run time from element or attribute nodes and is of the same type as the user-defined atomic type (derived by restriction) in @as. Verify the parameter is of the type specified in @as.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1805.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3>
<var4>falsetrue</var4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1806">
      <description>Test type of global xsl:variable where @select contains user-defined types derived by restriction from xs:decimal or from xs:float, @as="xs:double".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1806.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1807">
      <description>Test type of global xsl:variable where @select contains user-defined types derived by restriction from xs:decimal, @as="xs:float".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1807.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3>
<var4>falsetrue</var4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1808">
      <description>Test type of xsl:functions that return user-defined types derived by restriction from xs:decimal or from xs:float, @as="xs:double".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1808.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<func1>falsetrue</func1>
<func2>falsetrue</func2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1809">
      <description>Test type of tunnel xsl:with-param where @select contains user-defined types derived by restriction from xs:decimal or from xs:float, @as="xs:double".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1809.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>1.0001falsetrue</par1>
<par2>-1falsetrue</par2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1810">
      <description>Test type of global xsl:variable with @select selecting a typed attribute node from input file, @as="schema-attribute($QName)". Verify that the type annotation for the selected attribute is the same as the schema attribute declaration $QName and its name= $QName.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1810.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetruetruetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1811">
      <description>Test with xsl:template which returns a mixed sequence of derived built-in or user-defined atomic values and @as="xs:anyAtomicType+".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1811.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1811.out"/>
      </result>
   </test-case>

   <test-case name="as-1812">
      <description>Test of xsl:template with @as="schema-attribute($QName)". Sequence constructor contains an attribute from input file or an explicitly created xsl:attribute, with the same type or typed derived from the one for $QName.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1812.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1812.out"/>
      </result>
   </test-case>

   <test-case name="as-1813">
      <description>Test of xsl:template which contains an attribute node from input file, or explicitly created xsl:attribute and @as="attribute (QName, user-derived-simple-type)".Types tested: - user-defined atomic, list, union</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-18"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1813.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1813.out"/>
      </result>
   </test-case>

   <test-case name="as-1901">
      <description>
      	Test with global xsl:variable where @select has an xs:untypedAtomic value and @as ontained at run time, 
      	@as is a built-in derived atomic type. Verify the variable is of the type specified in @as.
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="as-1702.xsl"/>
      </test>
      <result>
         <assert-xml file="as-1901.out"/>
      </result>
   </test-case>

   <test-case name="as-1902">
      <description>Test with local xsl:variable where @select has an xs:untypedAtomic value and @as is a built-in derived atomic type. Verify the variable is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas028.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3>
<var4>falsetrue</var4>
<var5>falsetrue</var5>
<var6>falsetrue</var6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1903">
      <description>Test with global xsl:param where @select is xs:untypedAtomic and @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas038.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1904">
      <description>Test with global xsl:param without @select, where the sequence constructor contains xs:untypedAtomic value and @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as.Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas041.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1905">
      <description>Test with local xsl:param where @select is xs:untypedAtomic and @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas044.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1906">
      <description>Test with non-tunnel xsl:with-param where the value in @select is xs:untypedAtomic value and @as is a built-in derived atomic type. Verify the parameter is of the type specified in @as. Types tested: -xs:nonPositiveInteger, xs:int, xs:long, xs:unsignedByte, xs:NMTOKEN, xs:ID</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
         <year_component_values value="support negative year"/>
      </dependencies>
      <test>
         <stylesheet file="schemaas050.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>falsetrue</par1>
<par2>falsetrue</par2>
<par3>falsetrue</par3>
<par4>falsetrue</par4>
<par5>falsetrue</par5>
<par6>falsetrue</par6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1907">
      <description>Test with tunnel xsl:param where value in @select is xs:untypedAtomic obtained at run time and @as=xs:token.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1907.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><par1>two organizationstrue</par1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-1908">
      <description>Test with tunnel xsl:with-param without @select, where the sequence constructor contains an xs:untypedAtomic obtained at run time and @as=xs:token.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-19"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-1908.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><par1>two organizationstrue</par1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2001">
      <description>Test with xsl:template which contains an xs:untypedAtomic value obtained at run time and @as is a user-defined atomic type (derived by restriction). Verify no typing error is raised.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-20"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2001.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<temp1>000-TM</temp1>
<temp2>1.0001</temp2>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2002">
      <description>Test with global xsl:variable with @select and @as is a user-defined atomic type with occurrence indicator (?). Verify the variable is of the type specified in @as. @select has: - an xs:untypedAtomic value, an empty-sequence</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-20"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2002.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1>
<var2>truefalse</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2101">
      <description>Test type of global xsl:variable where @select contains user-defined types derived by restriction from xs:anyURI, @as="xs:string".(type promotion)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-21"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2101.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>falsetrue</var1>
<var2>falsetrue</var2>
<var3>falsetrue</var3>
<var4>falsetrue</var4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2201">
      <description>Test type of global xsl:variable where @select contains a user-defined value derived by restriction from xs:integer, @as="xs:decimal".(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-22"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2201.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1>
<var2>truetrue</var2>
<var3>truetrue</var3>
<var4>truetrue</var4>
<var5>truetrue</var5>
<var6>truetrue</var6></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2301">
      <description>Test type of global xsl:variable where @select contains a user-defined value derived by restriction from xs:int, @as="xs:int".(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-23"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2301.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2401">
      <description>Test type of global xsl:variable where @select contains a user-defined value derived by restriction from another user-defined type that is also specified in @as.(subtype substitution)</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-24"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2401.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2501">
      <description>Test with xsl:template that contains built-in types derived by restriction from xs:decimal, @as="xs:float".(type promotion) Types tested: - xs:long, xs:nonNegativeInteger, xs:int, xs:byte</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-25"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2501.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<temp1>131072</temp1>
<temp2>44444</temp2>
<temp3>-922337</temp3>
<temp4>-128</temp4>
</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2601">
      <description>Test with xsl:template which contains values (explicitly constructed or obtained at run time) of the same type as the built-in derived atomic type specified in @as, use occurrence indicator (*). Sequence constructor contains: - a sequence of typed values, a single typed value</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2601.xsl"/>
      </test>
      <result>
         <assert-xml file="as-2601.out"/>
      </result>
   </test-case>

   <test-case name="as-2602">
      <description>Test with a sequence of xs:token values obtained at run time in @select of a tunnel xsl:param and @as=xs:token+. Verify the parameter is of type xs:token+.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-26"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2602.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><par1>one two two organizations true</par1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2701">
      <description>Test with a sequence of xs:ID values obtained at run time in @select of a local xsl:variable and @as=xs:ID+. Verify the variable is of type xs:ID+.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-27"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2701.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>_ab c1 myid * falsetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2801">
      <description>Test type of global xsl:variable selecting a document node from input file, @as="document-node(element(QName, derived atomic type))". Verify that the document element is valid.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-28"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2801.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2802">
      <description>Test type of global xsl:variable selecting a document node from input file, @as="document-node(schema-element(QName))". Verify that the document element is valid against the top level element declaration with name=QName.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-28"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2802.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2803">
      <description>Test of xsl:template which contains a document node from input file, @as="document-node(element(QName, built-in primitive/derived atomic type))". Verify that the document element is valid.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-28"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2803.xsl"/>
      </test>
      <result>
         <assert>exists(/)</assert>
      </result>
   </test-case>

   <test-case name="as-2804">
      <description>Test type of global xsl:variable with @as="document-node(element(QName, derived atomic type)) ?" and @select=().</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-28"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2804.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>truetruefalse</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2901">
      <description>Test type of global xsl:variable with @select selecting a typed element node from input file, @as="element(QName, built-in primitive/derived atomic type)".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2901.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>true</var1><var2>true</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2902">
      <description>Test type of global xsl:variable without @select and @as="element(QName, built-in primitive/derived atomic type)". Sequence constructor contains a typed element from input file, or explicitly created xsl:element or LRE.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2902.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>true</var1><var2>true</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2903">
      <description>Test type of global xsl:variable with @select selecting a typed element node from input file, @as="schema-element($QName)". Verify that selected element is annotated as an instance of the type defined by the schema element declaration $QName and its name= $QName.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2903.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>truetruetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2904">
      <description>
      	Test of xsl:template which contains a typed element node from input file, or 
      	explicitly created xsl:element or LRE with xsl:type, 
      	@as="element(QName, built-in primitive/derived atomic type)".
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2904.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><temp1><elem-anyURI>http://www.example.org/ns/test</elem-anyURI></temp1><temp2><elem-NMTOKEN>business-enforcement::link-chain.common</elem-NMTOKEN></temp2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-2905">
      <description>Test of xsl:template with @as="schema-element($QName)". Sequence constructor contains a typed element from input file, an explicitly created xsl:element or LRE, all with the same type or a type derived from the one for $QName.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2905.xsl"/>
      </test>
      <result>
         <assert-xml file="as-2905.out"/>
      </result>
   </test-case>

   <test-case name="as-2906">
      <description>Test type of result of xsl:function with @as="element(QName, built-in primitive/derived atomic type)". Sequence constructor copies a typed element from input file.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-29"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-2906.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><func1>true</func1>
<func2>true</func2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3001">
      <description>
      	Test type of global xsl:variable with @select selecting a typed element node from input file, 
      	@as="element(QName, built-in primitive/derived atomic type)".
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-30"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3001.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>true</var1>
<var2>true</var2>
<var3>true</var3>
<var4>true</var4>
<var5>true</var5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3002">
      <description>
      	Test of xsl:template which contains a typed element node from input file, or explicitly created 
      	xsl:element or LRE with xsl:type, @as="element(QName, user-defined-list-type)". Item types in the list are:
       	- built-in primitive, built-in derived, user-defined atomic, union
      </description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-30"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3002.xsl"/>
      </test>
      <result>
         <assert-xml file="as-3002.out"/>
      </result>
   </test-case>

   <test-case name="as-3003">
      <description>
      	Test type of tunnel xsl:with-param with @select selecting a typed element node from input file, 
      	@as="element(*, user-defined-list-type)". Item types in the list are: - built-in primitive, 
      	built-in derived, user-defined atomic, union</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-30"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3003.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>true</par1>
<par2>true</par2>
<par3>true</par3>
<par4>true</par4>
<par5>true</par5></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3101">
      <description>Test type of global xsl:variable without @select and @as="element(QName, user-defined-union-type)". Sequence constructor contains a typed element from input file, or explicitly created xsl:element or LRE. Item types in the union are: -built-in primitive, built-in derived, user-defined atomic, list, mix of the above</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-31"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3101.xsl"/>
      </test>
      <result>
         <assert-xml file="as-3101.out"/>
      </result>
   </test-case>

   <test-case name="as-3102">
      <description>Test of xsl:template which contains a typed element node from input file, or explicitly created xsl:element or LRE with xsl:type, @as="element(QName, user-defined-union-type)". There is only one member type, one of: -built-in primitive, built-in derived, user-defined atomic, list</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-31"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3102.xsl"/>
      </test>
      <result>
         <assert-xml file="as-3102.out"/>
      </result>
   </test-case>

   <test-case name="as-3201">
      <description>Test type of global xsl:variable with @select selecting a typed element node from input file, @as="schema-element($QName)". Verify that selected element is annotated as an instance of the type defined by the schema element declaration $QName and its name comes from the substitution group of $QName.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3201.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out><var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3202">
      <description>Test type of result of xsl:function with @as="schema-element($QName)". Sequence constructor contains a typed element node from input file.Verify that selected element is annotated as an instance of the type defined by the schema element declaration $QName and its name comes from the substitution group of $QName.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-32"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3202.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>truetrue</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3301">
      <description>Test type of global xsl:variable selecting a typed attribute node from input file and @as="attribute (QName, xs:NOTATION)".</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-33"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3301.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3401">
      <description>Test type of global xsl:variable selecting a typed attribute node from input file and @as="attribute(QName, built-in-list-type)". Types tested: xs:NMTOKENS, xs:ENTITIES xs:IDREFS.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-34"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3401.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1>
<var2>truetrue</var2>
<var3>truetrue</var3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3501">
      <description>Test type of global xsl:variable with @as="element(*, user-defined-atomic-type) +". @select has: - a typed element node from input file, a sequence of typed element nodes from input file</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-35"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3501.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truetrue</var1>
<var2>truefalse</var2></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3502">
      <description>Test type of global xsl:variable with @as="schema-element($QName) *"; @select has: -(), a typed element node from input file, a set of typed element nodes from input file</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-35"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3502.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<var1>truefalse</var1>
<var2>truetrue</var2>
<var3>truefalse</var3></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3503">
      <description>Test with xsl:template that has @as="document-node(element(QName, user-defined-list-type) +". The sequence constructor contains several xsl:document with a valid document elements.</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-35"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3503.xsl"/>
      </test>
      <result>
         <assert-xml file="as-3503.out"/>
      </result>
   </test-case>

   <test-case name="as-3504">
      <description>Test of xsl:template with @as="schema-element($QName) *". Sequence constructor contains: -(), a typed element node from input file, a set of typed element nodes from input file</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-35"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3504.xsl"/>
      </test>
      <result>
         <assert-xml file="as-3504.out"/>
      </result>
   </test-case>

   <test-case name="as-3505">
      <description>Test type of non-tunnel xsl:with-param with @as="element(*, user-defined-atomic-type) *". @select has one of: -(), an empty sequence obtained at run time, a typed element node from input file, a set of typed element nodes from input file</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-35"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3505.xsl"/>
      </test>
      <result>
         <assert-xml><![CDATA[<out>
<par1>true</par1>
<par2>true</par2>
<par3>true</par3>
<par4>true</par4></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="as-3601">
      <description>Test of xsl:template with @as="schema-attribute($QName) +". Sequence constructor contains: -a typed attribute node from input file, a set of typed attribute nodes from input file</description>
      <created by="Michael Kay" on="2012-10-30"/>
      <environment ref="as-36"/>
      <dependencies>
         <spec value="XSLT20+"/>
         <feature value="schema_aware"/>
      </dependencies>
      <test>
         <stylesheet file="as-3601.xsl"/>
      </test>
      <result>
         <assert-xml file="as-3601.out"/>
      </result>
   </test-case>
</test-set>
